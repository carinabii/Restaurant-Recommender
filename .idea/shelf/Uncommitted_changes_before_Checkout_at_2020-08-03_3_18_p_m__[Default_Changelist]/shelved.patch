Index: src/main/ui/RecommendationApp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ui;\r\n\r\nimport model.*;\r\n//import persistence.RecommendationReader;\r\nimport persistence.Reader;\r\nimport persistence.Writer;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class RecommendationApp {\r\n    public static final String RECOMMENDATIONS_FILE = \"./data/recommendations.txt\";\r\n    public Restaurant comeAlong;\r\n    public Restaurant nori;\r\n    public Restaurant greenBasil;\r\n    public Restaurant myst;\r\n    public Restaurant kokoro;\r\n    public Restaurant gyuKaku;\r\n    public Restaurant sura;\r\n    public Restaurant deerGarden;\r\n\r\n    public RecommendationList recommendations;\r\n    public RestaurantList resList;\r\n\r\n    private Scanner input;\r\n\r\n    // EFFECTS: run the recommendation application\r\n    public RecommendationApp() {\r\n        runRecommendation();\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: loads restaurants\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: process user input\r\n    private void runRecommendation() {\r\n        boolean keepRunning = true;\r\n        String action = null;\r\n        input = new Scanner(System.in);\r\n\r\n        loadRestaurants();\r\n        compileRestaurants();\r\n        loadRecommendations();\r\n\r\n        while (keepRunning) {\r\n            displayChoices();\r\n            action = input.next();\r\n            action = action.toLowerCase();\r\n\r\n            if (action.equals(\"exit\")) {\r\n                keepRunning = false;\r\n            } else {\r\n                processAction(action);\r\n            }\r\n\r\n        }\r\n        System.out.println(\"\\nSee you next time!\");\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: loads all restaurants and compiles into a list of restaurants\r\n    private void loadRestaurants() {\r\n        comeAlong = new Restaurant(\"Come Along\", \"Chinese\", 3.8, 2);\r\n        nori = new Restaurant(\"Nori Bento & Udon\", \"Japanese\", 3.5, 1);\r\n        greenBasil = new Restaurant(\"Green Basil\", \"Thai\", 3, 3);\r\n        myst = new Restaurant(\"Myst\", \"Chinese\", 4, 1);\r\n        kokoro = new Restaurant(\"Kokoro Tokyo Mazesoba\", \"Japanese\", 4.2, 2);\r\n        gyuKaku = new Restaurant(\"Gyu-Kaku Japanese BBQ\", \"Japanese\", 4.1, 2);\r\n        sura = new Restaurant(\"Sura Korean Cuisine\", \"Korean\", 3.9, 3);\r\n        deerGarden = new Restaurant(\"Deer Garden Signatures\", \"Chinese\", 3.6, 1);\r\n    }\r\n\r\n    // MODIFIES: resList\r\n    // EFFECTS: adds loaded restaurants to resList\r\n    private void compileRestaurants() {\r\n        resList = new RestaurantList();\r\n\r\n        resList.addRestaurant(comeAlong);\r\n        resList.addRestaurant(greenBasil);\r\n        resList.addRestaurant(myst);\r\n        resList.addRestaurant(nori);\r\n        resList.addRestaurant(kokoro);\r\n        resList.addRestaurant(gyuKaku);\r\n        resList.addRestaurant(sura);\r\n        resList.addRestaurant(deerGarden);\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: loads recommendations from recommendations.txt, if file exists\r\n    // otherwise initializes empty recommendationslist\r\n    private void loadRecommendations() {\r\n        try {\r\n            initializeRecommendationList();\r\n            List<Restaurant> recommended =\r\n                    Reader.readRestaurants(new File(RECOMMENDATIONS_FILE));\r\n            for (Restaurant res : recommended) {\r\n                recommendations.addRestaurantToRecommendation(res);\r\n            }\r\n        } catch (IndexOutOfBoundsException e) {\r\n            initializeRecommendationList();\r\n        } catch (IOException e) {\r\n            initializeRecommendationList();\r\n        }\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: creates new recommendation list\r\n    private void initializeRecommendationList() {\r\n        recommendations = new RecommendationList();\r\n    }\r\n\r\n    //EFFECTS: saves state of recommendationsList with restaurant input to recommendations.txt\r\n    private void saveRestaurants() {\r\n        try {\r\n            Writer writer = new Writer(new File(RECOMMENDATIONS_FILE));\r\n            int i = 0;\r\n            while (recommendations.completed.size() < recommendations.length()) {\r\n                writer.write(recommendations.getRestaurant(i));\r\n                recommendations.addToCompleted(i);\r\n                i++;\r\n            }\r\n            writer.close();\r\n\r\n            System.out.println(\"Recommendations saved to file \" + RECOMMENDATIONS_FILE);\r\n        } catch (FileNotFoundException e) {\r\n            System.out.println(\"Unable to save recommendations to \" + RECOMMENDATIONS_FILE);\r\n        } catch (UnsupportedEncodingException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // EFFECTS: displays choices of valid command inputs to the user\r\n    private void displayChoices() {\r\n        System.out.println(\"\\nSelect an action from the following:\");\r\n        System.out.println(\"\\ncuisine -> organize recommendations by type of cuisine\");\r\n        System.out.println(\"\\nprice -> organize recommendations by price\");\r\n        System.out.println(\"\\nview -> view saved restaurant recommendations list\");\r\n        System.out.println(\"\\nrestaurants -> view all restaurants available in the system\");\r\n        System.out.println(\"\\nsave -> save recommendation data to file\");\r\n        System.out.println(\"\\nexit -> exit the application\");\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: processes action inputted by the user\r\n    private void processAction(String action) {\r\n        if (action.equals(\"cuisine\")) {\r\n            organizeByCuisine();\r\n        } else if (action.equals(\"price\")) {\r\n            organizeByPrice();\r\n        } else if (action.equals(\"view\")) {\r\n            viewStoredRestaurants();\r\n        } else if (action.equals(\"restaurants\")) {\r\n            viewAll();\r\n        } else if (action.equals(\"save\")) {\r\n            saveRestaurants();\r\n        } else {\r\n            System.out.println(\"Invalid input...\");\r\n        }\r\n\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: organizes the list of restaurants by inputted cuisine\r\n    private void organizeByCuisine() {\r\n        System.out.println(\"\\n What type of cuisine would you like to enjoy? \\nSelect:\");\r\n        System.out.println(\"\\nChinese\");\r\n        System.out.println(\"\\nJapanese\");\r\n        System.out.println(\"\\nThai\");\r\n        System.out.println(\"\\nKorean\");\r\n        String cuisine = input.next();\r\n\r\n        resList.specPrice.clear();\r\n        resList.specCuisine.clear();\r\n        if (cuisine.equals(\"Chinese\") || cuisine.equals(\"Japanese\")\r\n                || cuisine.equals(\"Thai\") || cuisine.equals(\"Korean\")) {\r\n            resList.sortByCuisine(cuisine);\r\n            System.out.println(\"To view details of a restaurant, please select:\");\r\n            for (int i = 0; i < resList.specCuisine.size(); i++) {\r\n                System.out.println(i + \" -> \" + resList.specCuisine.get(i).getName());\r\n            }\r\n            selectRestaurantByCuisine();\r\n\r\n        } else {\r\n            System.out.println(\"\\nInvalid selection...\");\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: organizes the list of restaurants by inputted price\r\n    private void organizeByPrice() {\r\n        System.out.println(\"\\nWhat price point would you like? \\nSelect:\");\r\n        System.out.println(\"\\n1 -> $\");\r\n        System.out.println(\"\\n2 -> $$\");\r\n        System.out.println(\"\\n3 -> $$$\");\r\n        int price = input.nextInt();\r\n\r\n        resList.specPrice.clear();\r\n        resList.specCuisine.clear();\r\n        if (price == 1 || price == 2 || price == 3) {\r\n            resList.sortByPrice(price);\r\n            System.out.println(\"To view details of a restaurant, please select:\");\r\n            for (int i = 0; i < resList.specPrice.size(); i++) {\r\n                System.out.println(i + \" -> \" + resList.specPrice.get(i).getName());\r\n            }\r\n            selectRestaurantByPrice();\r\n        } else {\r\n            System.out.println(\"\\nInvalid selection...\");\r\n        }\r\n\r\n    }\r\n\r\n    // EFFECTS: prints out details of the selected restaurant\r\n    private void selectRestaurantByCuisine() {\r\n        String choice = input.next();\r\n\r\n        try {\r\n            if (choice.equals(\"back\")) {\r\n                organizeByCuisine();\r\n            } else {\r\n                getRestaurantByCuisine(Integer.parseInt(choice));\r\n            }\r\n\r\n        } catch (NumberFormatException e) {\r\n            System.out.println(\"Invalid Input...\");\r\n        }\r\n    }\r\n\r\n    // EFFECTS: pushes to printDetail and then addtoRecommendations\r\n    private void getRestaurantByCuisine(int choice) {\r\n        printDetails(resList.specCuisine.get(choice));\r\n        addToRecommendations(resList.specCuisine.get(choice));\r\n    }\r\n\r\n    // EFFECTS: prints out details of the selected restaurant\r\n    private void selectRestaurantByPrice() {\r\n        String choice = input.next();\r\n\r\n        try {\r\n            if (choice.equals(\"back\")) {\r\n                organizeByCuisine();\r\n            } else {\r\n                getRestaurantByPrice(Integer.parseInt(choice));\r\n            }\r\n        } catch (NumberFormatException e) {\r\n            System.out.println(\"Invalid Input...\");\r\n        }\r\n\r\n    }\r\n\r\n    // EFFECTS: pushes to printDetail and then addtoRecommendations\r\n    private void getRestaurantByPrice(int choice) {\r\n        printDetails(resList.specPrice.get(choice));\r\n        addToRecommendations(resList.specPrice.get(choice));\r\n\r\n    }\r\n\r\n    // EFFECTS: prints details of restaurant\r\n    public void printDetails(Restaurant res) {\r\n        System.out.println(res.getName() + \" has been selected!\");\r\n        System.out.println(\"cuisine = \" + res.getCuisine() + \", rating = \"\r\n                + res.getRating() + \", price = \" + res.getPrice());\r\n\r\n    }\r\n\r\n    // EFFECTS: adds the inputted restaurant into a list of recommendations\r\n    private void addToRecommendations(Restaurant res) {\r\n        System.out.println(\"Add to recommendations? Type: \");\r\n        System.out.println(\"\\ny -> yes\");\r\n        System.out.println(\"\\nn -> no\");\r\n        String choice = input.next();\r\n\r\n        if (choice.equals(\"y\") && !recommendations.recContains(res)) {\r\n            recommendations.addRestaurantToRecommendation(res);\r\n            System.out.println(res.getName() + \" has been added!\");\r\n        } else if (choice.equals(\"y\") && recommendations.recContains(res)) {\r\n            System.out.println(\"Restaurant already in recommendations!\");\r\n        } else if (choice.equals(\"n\")) {\r\n            System.out.println(\"No restaurant added!\");\r\n        } else {\r\n            System.out.println(\"Invalid input...\");\r\n        }\r\n    }\r\n\r\n    // EFFECTS: prints out list of names of all recommended restaurants with stored information\r\n    private void viewStoredRestaurants() {\r\n        recommendations.displayAllRestaurantsRecommendation();\r\n    }\r\n\r\n    //EFFECTS: prints out list of all stored restaurants in system\r\n    private void viewAll() {\r\n        resList.displayAllRestaurants();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/ui/RecommendationApp.java	(revision afa716ecfaa27c95fa253d3da10092b275c6c055)
+++ src/main/ui/RecommendationApp.java	(date 1596493024381)
@@ -62,6 +62,7 @@
         System.out.println("\nSee you next time!");
     }
 
+
     // MODIFIES: this
     // EFFECTS: loads all restaurants and compiles into a list of restaurants
     private void loadRestaurants() {
@@ -114,6 +115,7 @@
         recommendations = new RecommendationList();
     }
 
+
     //EFFECTS: saves state of recommendationsList with restaurant input to recommendations.txt
     private void saveRestaurants() {
         try {
@@ -166,6 +168,7 @@
 
     }
 
+
     // MODIFIES: this
     // EFFECTS: organizes the list of restaurants by inputted cuisine
     private void organizeByCuisine() {
@@ -291,6 +294,8 @@
         }
     }
 
+
+
     // EFFECTS: prints out list of names of all recommended restaurants with stored information
     private void viewStoredRestaurants() {
         recommendations.displayAllRestaurantsRecommendation();
